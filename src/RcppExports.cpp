// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// cumsumBounded
NumericVector cumsumBounded(NumericVector x, double low, double high);
RcppExport SEXP _SBR_cumsumBounded(SEXP xSEXP, SEXP lowSEXP, SEXP highSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type low(lowSEXP);
    Rcpp::traits::input_parameter< double >::type high(highSEXP);
    rcpp_result_gen = Rcpp::wrap(cumsumBounded(x, low, high));
    return rcpp_result_gen;
END_RCPP
}
// etcadj
NumericVector etcadj(NumericVector n, NumericVector e, NumericVector irrig, double taw, double p, NumericVector k);
RcppExport SEXP _SBR_etcadj(SEXP nSEXP, SEXP eSEXP, SEXP irrigSEXP, SEXP tawSEXP, SEXP pSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type e(eSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type irrig(irrigSEXP);
    Rcpp::traits::input_parameter< double >::type taw(tawSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(etcadj(n, e, irrig, taw, p, k));
    return rcpp_result_gen;
END_RCPP
}
// ks
NumericVector ks(NumericVector n, NumericVector e, NumericVector irrig, double taw, double p, NumericVector k);
RcppExport SEXP _SBR_ks(SEXP nSEXP, SEXP eSEXP, SEXP irrigSEXP, SEXP tawSEXP, SEXP pSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type e(eSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type irrig(irrigSEXP);
    Rcpp::traits::input_parameter< double >::type taw(tawSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(ks(n, e, irrig, taw, p, k));
    return rcpp_result_gen;
END_RCPP
}
// waste_water_adj
NumericVector waste_water_adj(NumericVector n, NumericVector e, NumericVector irrig, double taw, double p, NumericVector k);
RcppExport SEXP _SBR_waste_water_adj(SEXP nSEXP, SEXP eSEXP, SEXP irrigSEXP, SEXP tawSEXP, SEXP pSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type e(eSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type irrig(irrigSEXP);
    Rcpp::traits::input_parameter< double >::type taw(tawSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(waste_water_adj(n, e, irrig, taw, p, k));
    return rcpp_result_gen;
END_RCPP
}
// wbadj
NumericVector wbadj(NumericVector n, NumericVector e, NumericVector irrig, double taw, double p, NumericVector k);
RcppExport SEXP _SBR_wbadj(SEXP nSEXP, SEXP eSEXP, SEXP irrigSEXP, SEXP tawSEXP, SEXP pSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type e(eSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type irrig(irrigSEXP);
    Rcpp::traits::input_parameter< double >::type taw(tawSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(wbadj(n, e, irrig, taw, p, k));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SBR_cumsumBounded", (DL_FUNC) &_SBR_cumsumBounded, 3},
    {"_SBR_etcadj", (DL_FUNC) &_SBR_etcadj, 6},
    {"_SBR_ks", (DL_FUNC) &_SBR_ks, 6},
    {"_SBR_waste_water_adj", (DL_FUNC) &_SBR_waste_water_adj, 6},
    {"_SBR_wbadj", (DL_FUNC) &_SBR_wbadj, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_SBR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
