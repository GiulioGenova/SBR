}else if (over$BEZ%in%c(3,4,5)){
dstr <- 1 # "Bolzano, Oltradige e Bassa Atesina"
}else if (over$BEZ==6){
dstr <- 4 # "Val d´Isarco e Val Sarentino"
}else if(over$BEZ==8){
dstr <- 6 # "Val Pusteria"
}
url <- sprintf("http://daten.buergernetz.bz.it/services/weather/district/%s/bulletin?format=json&lang=en",
dstr)
#url <- "http://daten.buergernetz.bz.it/services/weather/district/1/bulletin?format=json&lang=en"
u <- GET(url) %>% content
ui <- cbind(sapply(u[[4]], "[[", "date"),
sapply(u[[4]], "[[", "rainFrom"),
sapply(u[[4]], "[[", "rainTo"),
sapply(u[[4]], "[[", "temperatureMax"),
sapply(u[[4]], "[[", "temperatureMin")
) %>%
as.tibble
names(ui) <- c("date","rainFrom","rainTo","temperatureMax","temperatureMin")
ui$date <- as_date(ui$date,tz="Europe/Berlin")
ui$rainFrom <- as.numeric(ui$rainFrom)
ui$rainTo <- as.numeric(ui$rainTo)
colnames(ui)[colnames(ui)=="date"] <- "TimeStamp"
db$TimeStamp
View(db)
library(SBR)
library(SBR)
dff<-mergeEtAndForecast(long = long,lat = lat)
long=11.457978
lat=46.657158
dff<-mergeEtAndForecast(long = long,lat = lat)
crs <- districts@proj4string
point <- cbind(LONG=long,LAT=lat)
point <- SpatialPoints(point,proj4string = CRS("+init=epsg:4326"))
library(sp)
crs <- districts@proj4string
point <- cbind(LONG=long,LAT=lat)
point <- SpatialPoints(point,proj4string = CRS("+init=epsg:4326"))
point <- spTransform(point, CRS = crs)
over <- point%over%districts
if (over$BEZ==1) {
dstr <- 3 # "Val Venosta"
}else if (over$BEZ==2){
dstr <- 2 # "Burgraviato - Merano e dintorni"
}else if (over$BEZ==7){
dstr <- 5 # "Val d´Isarco e Val Sarentino"
}else if (over$BEZ%in%c(3,4,5)){
dstr <- 1 # "Bolzano, Oltradige e Bassa Atesina"
}else if (over$BEZ==6){
dstr <- 4 # "Val d´Isarco e Val Sarentino"
}else if(over$BEZ==8){
dstr <- 6 # "Val Pusteria"
}
url <- sprintf("http://daten.buergernetz.bz.it/services/weather/district/%s/bulletin?format=json&lang=en",
dstr)
#url <- "http://daten.buergernetz.bz.it/services/weather/district/1/bulletin?format=json&lang=en"
u <- GET(url) %>% content
library(dplyr)
#url <- "http://daten.buergernetz.bz.it/services/weather/district/1/bulletin?format=json&lang=en"
u <- GET(url) %>% content
library(httr)
#url <- "http://daten.buergernetz.bz.it/services/weather/district/1/bulletin?format=json&lang=en"
u <- GET(url) %>% content
ui <- cbind(sapply(u[[4]], "[[", "date"),
sapply(u[[4]], "[[", "rainFrom"),
sapply(u[[4]], "[[", "rainTo"),
sapply(u[[4]], "[[", "temperatureMax"),
sapply(u[[4]], "[[", "temperatureMin")
) %>%
as.tibble
names(ui) <- c("date","rainFrom","rainTo","temperatureMax","temperatureMin")
library(tibble)
ui <- cbind(sapply(u[[4]], "[[", "date"),
sapply(u[[4]], "[[", "rainFrom"),
sapply(u[[4]], "[[", "rainTo"),
sapply(u[[4]], "[[", "temperatureMax"),
sapply(u[[4]], "[[", "temperatureMin")
)
ui <- cbind(sapply(u[[4]], "[[", "date"),
sapply(u[[4]], "[[", "rainFrom"),
sapply(u[[4]], "[[", "rainTo"),
sapply(u[[4]], "[[", "temperatureMax"),
sapply(u[[4]], "[[", "temperatureMin")
) %>%
as.tibble
names(ui) <- c("date","rainFrom","rainTo","temperatureMax","temperatureMin")
View(ui)
ui$date <- as_date(ui$date,tz="Europe/Berlin")
View(ui)
library(lubridate)
ui$date <- as_date(ui$date,tz="Europe/Berlin")
ui$rainFrom <- as.numeric(ui$rainFrom)
ui$rainTo <- as.numeric(ui$rainTo)
colnames(ui)[colnames(ui)=="date"] <- "TimeStamp"
ui$TimeStamp<-as_datetime(ui$TimeStamp,tz="Europe/Berlin")
ui <- cbind(sapply(u[[4]], "[[", "date"),
sapply(u[[4]], "[[", "rainFrom"),
sapply(u[[4]], "[[", "rainTo"),
sapply(u[[4]], "[[", "temperatureMax"),
sapply(u[[4]], "[[", "temperatureMin")
) %>%
as.tibble
names(ui) <- c("date","rainFrom","rainTo","temperatureMax","temperatureMin")
ui$date <- as_date(ui$date,tz="Europe/Berlin")
ui$rainFrom <- as.numeric(ui$rainFrom)
ui$rainTo <- as.numeric(ui$rainTo)
colnames(ui)[colnames(ui)=="date"] <- "TimeStamp"
ui$TimeStamp
ui <- cbind(sapply(u[[4]], "[[", "date"),
sapply(u[[4]], "[[", "rainFrom"),
sapply(u[[4]], "[[", "rainTo"),
sapply(u[[4]], "[[", "temperatureMax"),
sapply(u[[4]], "[[", "temperatureMin")
) %>%
as.tibble
names(ui) <- c("date","rainFrom","rainTo","temperatureMax","temperatureMin")
#ui$date <- as_date(ui$date,tz="Europe/Berlin")
ui$rainFrom <- as.numeric(ui$rainFrom)
ui$rainTo <- as.numeric(ui$rainTo)
colnames(ui)[colnames(ui)=="date"] <- "TimeStamp"
ui$TimeStamp<-as_date(ui$TimeStamp,tz="Europe/Berlin")
ui$TimeStamp
library(SBR)
password='roMonaLisa$14pr'
user='ROeuracMonalisa'
host='95.171.35.104'
round="hour"
#datestart=Sys.Date()-4
datestart="2018-10-20"
dateend="2018-10-25"
long=11.457978
lat=46.657158
provSensor=c("N","GS","WG")
db <- mergeData(long = long,lat = lat,
datestart = datestart,
#dateend = dateend,
provSensor = provSensor,
password = password,user = user,host = host)
et <- ET(db)
data<-et
dff<-mergeEtAndForecast(long = long,lat = lat)
dfo<- data %>% select(TimeStamp,N_sum,ETc) %>%
filter(TimeStamp<Sys.Date())
library(magrittr)
dfo<- data %>% select(TimeStamp,N_sum,ETc) %>%
filter(TimeStamp<Sys.Date())
library(dplyr)
dfo<- data %>% select(TimeStamp,N_sum,ETc) %>%
filter(TimeStamp<Sys.Date())
View(dfo)
View(dff)
dfo$TimeStamp
dff$TimeStamp
library(SBR)
dff<-mergeEtAndForecast(long = long,lat = lat)
dff$TimeStamp
data<-et
dff<-mergeEtAndForecast(long = long,lat = lat)
dfo<- data %>% select(TimeStamp,N_sum,ETc) %>%
filter(TimeStamp<Sys.Date())
df<-bind_rows(dfo,dff)
View(df)
dfo<- data %>% select(TimeStamp,N_sum,ETc) %>%
filter(TimeStamp<Sys.Date())
colnames(dfo)[colnames(dfo)=="ETc"] <- "ET"
df<-bind_rows(dfo,dff)
View(df)
dff<-mergeEtAndForecast(long = long,lat = lat)
colnames(dff)[colnames(dff)=="ET"] <- "ETc"
dfo<- data %>% select(TimeStamp,N_sum,ETc) %>%
filter(TimeStamp<Sys.Date())
df<-bind_rows(dfo,dff)
df<-WB(df)
View(df)
dff<-mergeEtAndForecast(long = long,lat = lat)
colnames(dff)[colnames(dff)=="ET"] <- "ETc"
dfo<- data %>% select(TimeStamp,N_sum,ETc) %>%
filter(TimeStamp<Sys.Date())
df<-bind_rows(dfo,dff)
View(df)
library(SBR)
library(SBR)
password='roMonaLisa$14pr'
user='ROeuracMonalisa'
host='95.171.35.104'
round="hour"
#datestart=Sys.Date()-4
datestart="2018-11-08"
#dateend="2018-10-25"
long=11.457978
lat=46.657158
provSensor=c("N","GS")#,"WG"
db <- mergeData(long = long,lat = lat,
datestart = datestart,
#dateend = dateend,
provSensor = provSensor,
password = password,user = user,host = host)
et <- ET(db)
df <- mergeOldAndForecast(data = et,long = long,lat = lat)
wb <- WB(df)
password='roMonaLisa$14pr'
user='ROeuracMonalisa'
host='95.171.35.104'
round="hour"
#datestart=Sys.Date()-4
datestart="2018-11-08"
#dateend="2018-10-25"
long=11.457978
lat=46.657158
provSensor=c("N","GS")#,"WG"
db <- mergeData(long = long,lat = lat,
datestart = datestart,
#dateend = dateend,
provSensor = provSensor,
password = password,user = user,host = host)
et <- ET(db)
df <- mergeOldAndForecast(data = et,long = long,lat = lat)
wb <- WB(df)
password='roMonaLisa$14pr'
user='ROeuracMonalisa'
host='95.171.35.104'
round="hour"
#datestart=Sys.Date()-4
datestart="2018-11-08"
#dateend="2018-10-25"
long=11.457978
lat=46.657158
provSensor=c("N","GS")#,"WG"
db <- mergeData(long = long,lat = lat,
datestart = datestart,
#dateend = dateend,
provSensor = provSensor,
password = password,user = user,host = host)
et <- ET(db)
df <- mergeOldAndForecast(data = et,long = long,lat = lat)
wb <- WB(df)
View(wb)
View(df)
View(wb)
View(wb)
View(db)
View(et)
lubridate::yday(Sys.Date())
View(et)
View(wb)
# locate all the shiny app examples that exist
validExamples <- list.files(system.file("shinyApps", package = "SBR"))
# locate all the shiny app examples that exist
validExamples <- list.files(system.file("shinyApps", package = "SBR"))
# locate all the shiny app examples that exist
validExamples <- list.files(system.file("shinyApps/irrigApple", package = "SBR"))
validExamples
system.file("shinyApps", package = "SBR")
library(SBR)
# locate all the shiny app examples that exist
validExamples <- list.files(system.file("shinyApps", package = "SBR"))
validExamplesMsg <-
paste0(
"Valid examples are: '",
paste(validExamples, collapse = "', '"),
"'")
validExamplesMsg
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
library(shiny)
library(SBR)
run_app("irrigApple")
library(SBR)
run_app("irrigApple")
library(SBR)
run_app("irrigApple")
library(SBR)
run_app("irrigApple")
# Display a modal that requires valid input before continuing.
shinyApp(
ui = basicPage(
actionButton("show", "Show modal dialog"),
verbatimTextOutput("dataInfo")
),
server = function(input, output) {
# reactiveValues object for storing current data set.
vals <- reactiveValues(data = NULL)
# Return the UI for a modal dialog with data selection input. If 'failed' is
# TRUE, then display a message that the previous value was invalid.
dataModal <- function(failed = FALSE) {
modalDialog(
textInput("dataset", "Choose data set",
placeholder = 'Try "mtcars" or "abc"'
),
span('(Try the name of a valid data object like "mtcars", ',
'then a name of a non-existent object like "abc")'),
if (failed)
div(tags$b("Invalid name of data object", style = "color: red;")),
footer = tagList(
modalButton("Cancel"),
actionButton("ok", "OK")
)
)
}
# Show modal when button is clicked.
observeEvent(input$show, {
showModal(dataModal())
})
# When OK button is pressed, attempt to load the data set. If successful,
# remove the modal. If not show another modal, but this time with a failure
# message.
observeEvent(input$ok, {
# Check that data object exists and is data frame.
if (!is.null(input$dataset) && nzchar(input$dataset) &&
exists(input$dataset) && is.data.frame(get(input$dataset))) {
vals$data <- get(input$dataset)
removeModal()
} else {
showModal(dataModal(failed = TRUE))
}
})
# Display information about selected data
output$dataInfo <- renderPrint({
if (is.null(vals$data))
"No data selected"
else
summary(vals$data)
})
}
)
password='roMonaLisa$14pr'
user='ROeuracMonalisa'
host='95.171.35.104'
round="hour"
#datestart=Sys.Date()-4
datestart="2018-11-08"
#dateend="2018-10-25"
long=11.457978
lat=46.657158
provSensor=c("N","GS")#,"WG"
db <- mergeData(long = long,lat = lat,
datestart = datestart,
#dateend = dateend,
provSensor = provSensor,
password = password,user = user,host = host)
et <- ET(db)
df <- mergeOldAndForecast(data = et,long = long,lat = lat)
wb <- WB(df)
library(SBR)
run_app("irrigApple")
library(SBR)
run_app("irrigApple")
library(SBR)
library(SBR)
run_app("irrigApple")
library(SBR)
run_app("irrigApple")
run_app("irrigApple")
library(SBR)
run_app("irrigApple")
round="hour"
provSensor=c("N","GS")#,"WG"
password='roMonaLisa$14pr'
user='ROeuracMonalisa'
host='95.171.35.104'
long=11.457978
lat=46.657158
datestart <- "2018-11-01"
db <- mergeData(long = long,lat = lat,
datestart = datestart,
dateend = Sys.Date()+1,
provSensor = provSensor,
password = password,user = user,host = host)
et <- ET(data = db)
df <- mergeOldAndForecast(data = et,long = long,lat = lat)
wb <- WB(df)
ggplot2::ggplot(db(),aes(x=TimeStamp,y=wb))+
geom_line()
library(SBR)
run_app("irrigApple")
library(SBR)
run_app("irrigApple")
password='roMonaLisa$14pr'
user='ROeuracMonalisa'
host='95.171.35.104'
round="hour"
#datestart=Sys.Date()-4
datestart="2018-11-08"
#dateend="2018-10-25"
long=11.457978
lat=46.657158
provSensor=c("N","GS")#,"WG"
db <- mergeData(long = long,lat = lat,
datestart = datestart,
#dateend = dateend,
provSensor = provSensor,
password = password,user = user,host = host)
et <- ET(db)
View(et)
leaflet() %>%
addSearchOSM()%>%
addEasyButton(easyButton(
icon = "fa-crosshairs", title = "Locate Me",
onClick = JS("function(btn, map){ map.locate({setView: true}); }"))) %>%
addFullscreenControl()%>%
addProviderTiles("OpenStreetMap.Mapnik", group = "Street Map")%>%
addProviderTiles("Esri.WorldImagery", group = "Satellite") %>%
addMeasure(position = "topleft",primaryLengthUnit = "meters")%>%
addLayersControl(baseGroups = c("Street Map","Satellite"),#overlayGroups = c('draw'),
options = layersControlOptions(collapsed = FALSE),position = "topright")
library(leaflet)
library(leaflet.extras)
m <- leaflet() %>%
addSearchOSM()%>%
addEasyButton(easyButton(
icon = "fa-crosshairs", title = "Locate Me",
onClick = JS("function(btn, map){ map.locate({setView: true}); }"))) %>%
addFullscreenControl()%>%
addProviderTiles("OpenStreetMap.Mapnik", group = "Street Map")%>%
addProviderTiles("Esri.WorldImagery", group = "Satellite") %>%
addMeasure(position = "topleft",primaryLengthUnit = "meters")%>%
addLayersControl(baseGroups = c("Street Map","Satellite"),#overlayGroups = c('draw'),
options = layersControlOptions(collapsed = FALSE),position = "topright")
m
library(SBR)
run_app("irrigApple")
run_app("irrigApple")
library(SBR)
run_app("irrigApple")
library(SBR)
run_app("irrigApple")
library(SBR)
run_app("irrigApple")
run_app("irrigApple")
library(SBR)
run_app("irrigApple")
library(SBR)
run_app("irrigApple")
library(SBR)
run_app("irrigApple")
library(SBR)
run_app("irrigApple")
library(SBR)
run_app("irrigApple")
library(SBR)
run_app("irrigApple")
library(SBR)
run_app("irrigApple")
library(SBR)
run_app("irrigApple")
library(SBR)
run_app("irrigApple")
library(SBR)
run_app("irrigApple")
library(SBR)
library(SBR)
run_app("irrigApple")
library(SBR)
run_app("irrigApple")
library(SBR)
run_app("irrigApple")
library(SBR)
run_app("irrigApple")
library(SBR)
library(SBR)
run_app("irrigApple")
library(SBR)
run_app("irrigApple")
library(SBR)
run_app("irrigApple")
library(SBR)
run_app("irrigApple")
library(SBR)
run_app("irrigApple")
library(SBR)
run_app("irrigApple")
library(SBR)
run_app("irrigApple")
library(SBR)
run_app("irrigApple")
library(SBR)
run_app("irrigApple")
library(SBR)
run_app("irrigApple")
library(SBR)
run_app("irrigApple")
library(SBR)
run_app("irrigApple")
library(SBR)
run_app("irrigApple")
run_app("irrigApple")
library(SBR)
run_app("irrigApple")
library(SBR)
run_app("irrigApple")
password='roMonaLisa$14pr'
user='ROeuracMonalisa'
host='95.171.35.104'
round="hour"
#datestart=Sys.Date()-4
datestart="2018-11-08"
#dateend="2018-10-25"
long=11.457978
lat=46.657158
provSensor=c("N","GS")#,"WG"
db <- mergeData(long = long,lat = lat,
datestart = datestart,
#dateend = dateend,
provSensor = provSensor,
password = password,user = user,host = host)
max(db$TimeStamp)
library(SBR)
run_app("irrigApple")
library(SBR)
run_app("irrigApple")
run_app("irrigApple")
